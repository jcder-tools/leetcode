/*
    给定一个包含了一些 0 和 1 的非空二维数组 grid 。

    一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

    找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

     

    示例 1:

    [[0,0,1,0,0,0,0,1,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,0],
    [0,1,1,0,1,0,0,0,0,0,0,0,0],
    [0,1,0,0,1,1,0,0,1,0,1,0,0],
    [0,1,0,0,1,1,0,0,1,1,1,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,1,1,0,0,0,0]]
    对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。

    示例 2:

    [[0,0,0,0,0,0,0,0]]
    对于上面这个给定的矩阵, 返回 0。

     

    注意: 给定的矩阵grid 的长度和宽度都不超过 50。

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/max-area-of-island
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
import Foundation

class Solution {

    func maxAreaOfIsland(_ grid: [[Int]]) -> Int {



        var doneMap: [[Int]] = []

        var maxArea: Int = 0


        for i in 0 ... grid.count - 1 {

            for ii in 0 ... grid[i].count - 1 {

                if !doneMap.contains([i, ii]),
                    grid[i][ii] == 1 {
                    doneMap.append([i, ii])

                    var queue: [(Int, Int)] = [(posion[0], posion[1])]
                    var area = 1            
                    while !queue.isEmpty {

                        let top = queue.removeFirst()

                        if top.0 - 1 >= 0,
                            !doneMap.contains([top.0 - 1, top.1]),
                            grid[top.0 - 1][top.1] == 1 {
                            queue.append((top.0 - 1, top.1))
                            area += 1
                        }
                            doneMap.append([top.0 - 1, top.1])

                        if top.0 + 1 < grid.count,
                            !doneMap.contains([top.0 + 1, top.1]),
                            grid[top.0 + 1][top.1] == 1 {
                            queue.append((top.0 + 1, top.1))
                            area += 1

                        }
                            doneMap.append([top.0 + 1, top.1])

                        if top.1 + 1 < grid[top.0].count,
                            !doneMap.contains([top.0, top.1 + 1]),
                            grid[top.0][top.1 + 1] == 1 {
                            queue.append((top.0, top.1 + 1))
                            area += 1
                            doneMap.append([top.0, top.1 + 1])
                        }

                        if top.1 - 1 >= 0,
                            !doneMap.contains([top.0, top.1 - 1]),
                            grid[top.0][top.1 - 1] == 1 {
                            queue.append((top.0, top.1 - 1))
                            area += 1
                            doneMap.append([top.0, top.1 - 1])
                        }
                        
                    }

                    maxArea = maxArea >= area ? maxArea : area
                } else {

                    continue
                }

            }

        }

        return maxArea

    }
}

let grid = [[1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1],[1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0],[0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0],[0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,1,1],[0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0],[1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0],[1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0],[0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0],[1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0],[1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1],[0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1],[0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],[1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,0,1],[0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1],[0,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1],[1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0],[1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0],[1,0,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0],[0,1,0,0,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0],[0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1],[0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0],[0,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0],[0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0],[1,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1],[0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1],[0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,1,0,0,1,1],[0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,0],[1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1],[1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1],[0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1],[1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1],[1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,1,1],[0,1,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,0,1],[1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1],[0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0],[1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,1,0,0],[0,0,0,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1],[1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1],[1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,1,1],[0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0],[1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0],[1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1],[0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0],[1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1],[0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,0],[1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,1,0],[1,1,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,1],[1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1],[0,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1],[0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1]]
let s = Date()
let max = Solution().maxAreaOfIsland(grid)
let e = Date().timeIntervalSince(s)
print("\(max), duration: \(e)")